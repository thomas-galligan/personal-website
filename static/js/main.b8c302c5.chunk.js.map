{"version":3,"sources":["pages/components/BlogPost/BlogTitle.js","pages/components/BlogPost/BlogContent.js","pages/components/BlogPost/BlogPost.js","pages/Blog/Blog.js","pages/About/About.js","pages/Home/Home.js","pages/components/header/header.js","pages/components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["BlogTitle","props","className","post","title","date","BlogContent","text","tags","map","tag","Chip","icon","label","key","size","BlogPost","blogPosts","Blog","About","Home","Header","Tabs","value","pageSetting","page","onChange","event","newValue","setPage","indicatorColor","textColor","centered","Tab","Footer","pageMap","App","useState","CurrentPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gYAWeA,G,kBATG,SAACC,GACjB,OACE,yBAAKC,UAAU,aACb,uBAAGA,UAAU,SAASD,EAAME,KAAKC,OACjC,uBAAGF,UAAU,QAAQD,EAAME,KAAKE,S,iCCUvBC,EAXK,SAACL,GACnB,OACE,yBAAKC,UAAU,eACb,2BAAID,EAAME,KAAKI,MACf,yBAAKL,UAAU,WACZD,EAAME,KAAKK,KAAKC,KAAI,SAAAC,GAAG,OAAK,kBAACC,EAAA,EAAD,CAAMC,KAAM,kBAAC,IAAD,MAAoBC,MAAOH,EAAKI,IAAKJ,EAAKK,KAAK,QAAQb,UAAU,eCGnGc,G,MATE,SAACf,GAChB,OACE,yBAAKC,UAAU,YACb,kBAAC,EAAD,CAAWC,KAAMF,EAAME,OACvB,kBAAC,EAAD,CAAaA,KAAMF,EAAME,UCMzBc,EAAY,CAAC,CACjBb,MAAO,UACPC,KAAM,aACNE,KAAM,uCACNC,KAAM,CAAC,aAET,CACEJ,MAAO,gBACPC,KAAM,aACNE,KAAM,gcACNC,KAAM,CAAC,WAAY,sBAGNU,EAxBF,SAACjB,GACZ,OACE,yBAAKC,UAAU,QACZe,EAAUR,KAAI,SAAAN,GAAI,OAAI,kBAAC,EAAD,CAAUA,KAAMA,EAAMW,IAAKX,EAAKC,aCM9Ce,G,MAVD,SAAClB,GACb,OACE,yBAAKC,UAAU,SACb,gCACE,0ECSOkB,EAdF,SAACnB,GACZ,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4CACA,mG,wBCeOmB,EAjBA,SAACpB,GACd,OACE,kBAACqB,EAAA,EAAD,CACEpB,UAAU,SACVqB,MAAOtB,EAAMuB,YAAYC,KACzBC,SAAU,SAACC,EAAOC,GAAe3B,EAAMuB,YAAYK,QAAQD,IAC3DE,eAAe,UACfC,UAAU,UACVC,UAAQ,GAER,kBAACC,EAAA,EAAD,CAAKV,MAAM,OAAOV,MAAM,SACxB,kBAACoB,EAAA,EAAD,CAAKV,MAAM,OAAOV,MAAM,SACxB,kBAACoB,EAAA,EAAD,CAAKV,MAAM,QAAQV,MAAM,YCNhBqB,G,MARA,WACb,OACE,yBAAKhC,UAAU,UACb,6DCcN,IAAMiC,EAAU,CACdf,OAAMF,OAAMC,SAMCiB,EAnBf,WAAgB,IAAD,EACWC,mBAAS,QADpB,mBACNZ,EADM,KACAI,EADA,KAEPS,EAAcH,EAAQV,GAC5B,OACE,6BACE,kBAAC,EAAD,CAAQD,YAAa,CAAEC,OAAMI,aAC7B,kBAACS,EAAD,CAAad,YAAa,CAAEC,OAAMI,aAClC,kBAAC,EAAD,QCFcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b8c302c5.chunk.js","sourcesContent":["import React from 'react'\nimport './BlogTitle.css'\nconst BlogTitle = (props) => {\n  return (\n    <div className=\"BlogTitle\">\n      <p className=\"title\">{props.post.title}</p>\n      <p className=\"date\">{props.post.date}</p>\n    </div>\n  )\n}\n\nexport default BlogTitle","import React from 'react'\nimport \"./BlogContent.css\"\nimport { Chip } from '@material-ui/core'\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer'\n\nconst BlogContent = (props) => {\n  return (\n    <div className=\"BlogContent\">\n      <p>{props.post.text}</p>\n      <div className=\"taglist\">\n        {props.post.tags.map(tag => (<Chip icon={<LocalOfferIcon />} label={tag} key={tag} size=\"small\" className=\"Chip\" />))}\n      </div>\n    </div>\n  )\n}\n\nexport default BlogContent","import React from 'react'\nimport BlogTitle from './BlogTitle'\nimport BlogContent from './BlogContent'\nimport './BlogPost.css'\nconst BlogPost = (props) => {\n  return (\n    <div className=\"BlogPost\">\n      <BlogTitle post={props.post} />\n      <BlogContent post={props.post} />\n    </div>\n  )\n}\n\nexport default BlogPost","import React from 'react'\nimport \"./Blog.css\"\nimport BlogPost from '../components/BlogPost/BlogPost'\nconst Blog = (props) => {\n  return (\n    <div className=\"Blog\">\n      {blogPosts.map(post => <BlogPost post={post} key={post.title} />)}\n    </div>\n  )\n}\n\n// plan:\n// file of .md documents. Write to script to convert these to a blogPost object,\n// where `content` will be html.\nconst blogPosts = [{\n  title: \"A Title\",\n  date: \"02/12/1996\",\n  text: \"Here is a blog post! lorem ipsum ...\",\n  tags: [\"test tag\"]\n},\n{\n  title: \"Another title\",\n  date: \"05/05/2018\",\n  text: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n  tags: [\"test tag\", \"another test tag\"]\n}]\n\nexport default Blog","import React from 'react'\nimport \"./About.css\"\nconst About = (props) => {\n  return (\n    <div className=\"About\">\n      <header>\n        <h1>This is going to be the about section.</h1>\n      </header>\n    </div>\n  )\n}\n\nexport default About","import React from 'react'\nconst Home = (props) => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Tom Galligan</h1>\n        <p>\n          Hello! This will be my website/blog. Check back soon for updates.\n        </p>\n      </header>\n    </div>\n\n  );\n}\n\nexport default Home","import React from 'react'\nimport \"./header.css\"\nimport { Tabs, Tab } from '@material-ui/core'\n\nconst Header = (props) => {\n  return (\n    <Tabs\n      className=\"Header\"\n      value={props.pageSetting.page}\n      onChange={(event, newValue) => { props.pageSetting.setPage(newValue) }}\n      indicatorColor=\"primary\"\n      textColor=\"primary\"\n      centered\n    >\n      <Tab value=\"Home\" label=\"Home\" />\n      <Tab value=\"Blog\" label=\"Blog\" />\n      <Tab value=\"About\" label=\"About\" />\n    </Tabs>\n  )\n}\n\nexport default Header","import React from 'react'\nimport \"./Footer.css\"\nconst Footer = () => {\n  return (\n    <div className=\"Footer\">\n      <p>Copyright Tom Galligan 2020</p>\n    </div>\n  )\n}\n\nexport default Footer","import React, { useState } from 'react';\nimport './App.css';\nimport Blog from \"./pages/Blog/Blog\"\nimport About from \"./pages/About/About\"\nimport Home from \"./pages/Home/Home\"\nimport Header from './pages/components/header/header'\nimport Footer from \"./pages/components/Footer/Footer\"\nfunction App() {\n  const [page, setPage] = useState(\"Home\")\n  const CurrentPage = pageMap[page]\n  return (\n    <div>\n      <Header pageSetting={{ page, setPage }} />\n      <CurrentPage pageSetting={{ page, setPage }} />\n      <Footer />\n    </div>\n  )\n}\n\nconst pageMap = {\n  Home, Blog, About\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}